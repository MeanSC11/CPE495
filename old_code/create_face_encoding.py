import cv2
import numpy as np
import pyodbc
import random
import matplotlib.pyplot as plt
from insightface.app import FaceAnalysis  # ‡πÉ‡∏ä‡πâ ArcFace
from config import DATABASE_CONFIG
from PIL import Image
import io

# üîπ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Azure SQL
conn = pyodbc.connect(f"DRIVER={DATABASE_CONFIG['DRIVER']};"
                      f"SERVER={DATABASE_CONFIG['SERVER']};"
                      f"DATABASE={DATABASE_CONFIG['DATABASE']};"
                      f"UID={DATABASE_CONFIG['UID']};"
                      f"PWD={DATABASE_CONFIG['PWD']};"
                      "Encrypt=yes;"
                      "TrustServerCertificate=no;"
                      "Connection Timeout=30;")
cursor = conn.cursor()

# üîπ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• ArcFace (‡πÉ‡∏ä‡πâ GPU ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
face_app = FaceAnalysis(name='buffalo_l', providers=['CUDAExecutionProvider', 'CPUExecutionProvider'])
face_app.prepare(ctx_id=0)  # ‡∏•‡∏ö nms ‡∏≠‡∏≠‡∏Å

# üîπ ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
video_path = "videos/REF Face/65015916.mp4"
cap = cv2.VideoCapture(video_path)

if not cap.isOpened():
    print("Can't Open Video")
    exit()

# üîπ ‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
student_id = input("Insert StudentID: ")

# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ü‡∏£‡∏°‡∏™‡∏∏‡πà‡∏° 10 ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
frame_count = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
selected_frames = sorted(random.sample(range(frame_count), 10))

face_embeddings = []

# üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á embedding ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û (‡πÉ‡∏ä‡πâ Heatmap ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ reshape)
def embedding_to_image(embedding):
    # ‡πÉ‡∏ä‡πâ Heatmap ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• embedding ‡∏Ç‡∏ô‡∏≤‡∏î 512
    embedding_image = np.reshape(embedding, (16, 32))  # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (16x32 ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°)
    plt.imshow(embedding_image, cmap='hot', interpolation='nearest')
    plt.axis('off')  # ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Å‡∏ô x, y
    # ‡πÅ‡∏õ‡∏•‡∏á matplotlib plot ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    pil_img = Image.open(buf)
    return pil_img

# üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å embeddings
image_count = 0
for idx, frame_no in enumerate(selected_frames):
    try:
        cap.set(cv2.CAP_PROP_POS_FRAMES, frame_no)  # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        ret, frame = cap.read()

        if not ret:
            print(f"Skipped Frame {frame_no}: Failed to read frame.")
            continue

        print(f"Processing Frame {frame_no}")

        # üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        faces_detected = face_app.get(frame)
        if len(faces_detected) == 0:
            print(f"Skipped Frame {frame_no}: No face detected.")
            continue

        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Å‡∏±‡∏ö student_id ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        face_embedding = faces_detected[0].embedding  # ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        face_embeddings.append(face_embedding)

        # üîπ ‡πÄ‡∏û‡∏¥‡πà‡∏° Noise ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á 100 ‡∏†‡∏≤‡∏û
        for _ in range(9):  # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö 100 ‡∏†‡∏≤‡∏û
            noise = np.random.normal(0, 0.05, face_embedding.shape)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° Noise
            noisy_embedding = face_embedding + noise

            # ‡πÅ‡∏õ‡∏•‡∏á embeddings ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            img = embedding_to_image(noisy_embedding)
            img.save(f"images/results/embedding_{image_count}.png")  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û
            image_count += 1

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏™‡∏á (Brightness Adjustment)
            bright_embedding = face_embedding * (1 + random.uniform(-0.1, 0.1))  # ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á
            img = embedding_to_image(bright_embedding)
            img.save(f"images/results/embedding_{image_count}.png")  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û
            image_count += 1

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏•‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ (Blur effect)
            blur_embedding = np.roll(face_embedding, shift=random.randint(1, 5))  # ‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á effect
            img = embedding_to_image(blur_embedding)
            img.save(f"images/results/embedding_{image_count}.png")  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û
            image_count += 1

    except Exception as e:
        print(f"Error processing frame {frame_no}: {e}")
        continue

# üîπ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
print(f"100 images saved to the images folder.")

cap.release()
conn.close()
