#Create Face Encoding Referance
import cv2
import numpy as np
import pyodbc
import random
import matplotlib.pyplot as plt
from insightface.app import FaceAnalysis  # ‡πÉ‡∏ä‡πâ ArcFace
from config import DATABASE_CONFIG
from PIL import Image
import io
import json  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ json ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô JSON

# üîπ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Azure SQL
conn = pyodbc.connect(f"DRIVER={DATABASE_CONFIG['DRIVER']};"
                      f"SERVER={DATABASE_CONFIG['SERVER']};"
                      f"DATABASE={DATABASE_CONFIG['DATABASE']};"
                      f"UID={DATABASE_CONFIG['UID']};"
                      f"PWD={DATABASE_CONFIG['PWD']};"
                      "Encrypt=yes;"
                      "TrustServerCertificate=no;"
                      "Connection Timeout=30;")
cursor = conn.cursor()

# üîπ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• ArcFace (‡πÉ‡∏ä‡πâ GPU ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
face_app = FaceAnalysis(name='buffalo_l', providers=['CUDAExecutionProvider', 'CPUExecutionProvider'])
face_app.prepare(ctx_id=0)  # ‡πÉ‡∏ä‡πâ GPU ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ

# üîπ ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
video_path = "videos/REF Face/65010219.mp4"
cap = cv2.VideoCapture(video_path)

if not cap.isOpened():
    print("Can't Open Video")
    exit()

# üîπ ‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
student_id = input("Insert StudentID: ")

# üîπ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
frame_count = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
selected_frames = sorted([int(i * frame_count / 10) for i in range(10)])  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢

face_embeddings = []

# üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
def save_original_frame(frame, image_count):
    img = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)  # Convert from BGR to RGB
    pil_img = Image.fromarray(img)
    pil_img.save(f"images/results/original_frame_{image_count}.png")  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö

# üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡πÄ‡∏ü‡∏£‡∏°‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö 10 ‡πÄ‡∏ü‡∏£‡∏°
image_count = 1  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 1
processed_frames = 0  # ‡πÉ‡∏ä‡πâ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

for idx, frame_no in enumerate(selected_frames):
    while processed_frames < 10:
        try:
            cap.set(cv2.CAP_PROP_POS_FRAMES, frame_no)  # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            ret, frame = cap.read()

            if not ret:
                print(f"Skipped Frame {frame_no}: Failed to read frame, trying next.")
                frame_no += 1  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ü‡∏£‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                if frame_no >= frame_count:
                    print("Reached end of video.")
                    break
                continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ

            print(f"Processing Frame {frame_no}")

            # üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
            faces_detected = face_app.get(frame)
            if len(faces_detected) == 0:
                print(f"Skipped Frame {frame_no}: No face detected.")
                frame_no += 1  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ü‡∏£‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                if frame_no >= frame_count:
                    print("Reached end of video.")
                    break
                continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤

            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            face_embedding = faces_detected[0].embedding
            face_embeddings.append(face_embedding)

            # üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
            save_original_frame(frame, image_count)
            image_count += 1  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

            processed_frames += 1  # ‡∏ô‡∏±‡∏ö‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

            # üîπ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏™‡∏á
            for _ in range(10):  
                bright_embedding = face_embedding + np.random.normal(0.1, 0.1, face_embedding.shape)
                face_embeddings.append(bright_embedding)  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å embedding ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏™‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°

            # üîπ ‡∏•‡∏î‡πÅ‡∏™‡∏á
            for _ in range(10):  
                dark_embedding = face_embedding - np.random.normal(0.1, 0.1, face_embedding.shape)
                face_embeddings.append(dark_embedding)  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å embedding ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏™‡∏á‡∏•‡∏î

            # üîπ ‡πÄ‡∏ö‡∏•‡∏≠‡∏†‡∏≤‡∏û
            for _ in range(10):  
                blur_embedding = np.copy(face_embedding)  # ‡πÄ‡∏ö‡∏•‡∏≠‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á embedding ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ
                blur_embedding += np.random.normal(0, 0.1, blur_embedding.shape)
                face_embeddings.append(blur_embedding)  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å embedding ‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏•‡∏≠

            # üîπ ‡∏†‡∏≤‡∏û‡∏´‡∏≤‡∏¢
            for _ in range(10):  
                missing_embedding = face_embedding + np.random.normal(0, 0.15, face_embedding.shape)  # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏¢‡∏ö‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                face_embeddings.append(missing_embedding)  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å embedding ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢

            # üîπ ‡πÄ‡∏û‡∏¥‡πà‡∏° Noise ‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÜ
            for _ in range(50):  
                modified_embedding = face_embedding + np.random.normal(0, 0.1, face_embedding.shape)
                face_embeddings.append(modified_embedding)  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å embedding ‡∏ó‡∏µ‡πà‡∏°‡∏µ noise

            # üîπ ‡πÅ‡∏õ‡∏•‡∏á `face_embeddings` ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô JSON
            face_embeddings_json = json.dumps([embedding.tolist() for embedding in face_embeddings])

            # üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å face_embeddings ‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            cursor.execute("""
                UPDATE Students
                SET face_embedding = ?
                WHERE student_id = ?
            """, (face_embeddings_json, student_id))
            conn.commit()

            print(f"Student {student_id} has face embeddings stored")

            break  # ‡∏´‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏ü‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏•‡∏π‡∏õ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏ü‡∏£‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ

        except Exception as e:
            print(f"Error processing frame {frame_no}: {e}")
            frame_no += 1  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ü‡∏£‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
            if frame_no >= frame_count:
                print("Reached end of video.")
                break
            continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏ü‡∏£‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ

# üîπ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
print(f"10 original images saved to the face folder.")
print(f"100 embeddings (including noise, brightness, etc.) saved.")
print(f"Student {student_id} has face embeddings stored.")

cap.release()
conn.close()
