import cv2
import numpy as np
import pyodbc
import random
import json
import torch
import tensorflow as tf
from insightface.app import FaceAnalysis
from config import DATABASE_CONFIG
from PIL import Image
import io

# üîπ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Azure SQL
try:
    conn = pyodbc.connect(f"DRIVER={DATABASE_CONFIG['DRIVER']};"
                          f"SERVER={DATABASE_CONFIG['SERVER']};"
                          f"DATABASE={DATABASE_CONFIG['DATABASE']};"
                          f"UID={DATABASE_CONFIG['UID']};"
                          f"PWD={DATABASE_CONFIG['PWD']};"
                          "Encrypt=yes;"
                          "TrustServerCertificate=no;"
                          "Connection Timeout=30;")
    cursor = conn.cursor()
    print("Database connected successfully.")
except Exception as e:
    print(f"Error connecting to the database: {e}")
    exit()

# üîπ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• ArcFace ‡πÉ‡∏ä‡πâ TensorFlow
face_app = FaceAnalysis(name='buffalo_l', providers=['TENSORFLOW'])
face_app.prepare(ctx_id=0) 

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ TensorFlow ‡πÉ‡∏ä‡πâ GPU ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if tf.config.list_physical_devices('GPU'):
    print("TensorFlow is using GPU.")
else:
    print("TensorFlow is not using GPU.")

# üîπ ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
video_path = "videos/REF Face/65015916.mp4"
cap = cv2.VideoCapture(video_path)

if not cap.isOpened():
    print("Can't Open Video")
    exit()

# üîπ ‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
student_id = input("Insert StudentID: ")

# üîπ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
frame_count = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))

# üîπ ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏ü‡∏£‡∏° 100 ‡πÄ‡∏ü‡∏£‡∏°‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
sampled_frames = random.sample(range(frame_count), 100)  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 100 ‡πÄ‡∏ü‡∏£‡∏°‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

face_embeddings = []
frame_faces = []  # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤

# üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
def save_original_frame(frame, image_count):
    img = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)  # Convert from BGR to RGB
    pil_img = Image.fromarray(img)
    pil_img.save(f"images/results/original_frame_{image_count}.png")  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö

# üîπ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏ü‡∏£‡∏°‡∏™‡∏∏‡πà‡∏° 100 ‡πÄ‡∏ü‡∏£‡∏°
for frame_no in sampled_frames:
    try:
        cap.set(cv2.CAP_PROP_POS_FRAMES, frame_no)  # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        ret, frame = cap.read()

        if not ret:
            continue

        faces_detected = face_app.get(frame)
        if len(faces_detected) == 0:
            continue

        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å)
        face_embedding = faces_detected[0].embedding
        face_embeddings.append(face_embedding)
        frame_faces.append((frame, face_embedding))

    except Exception as e:
        print(f"Error processing frame {frame_no}: {e}")
        continue

# üîπ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 10 ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å 100 ‡∏£‡∏π‡∏õ
frame_faces_sorted = sorted(frame_faces, key=lambda x: np.linalg.norm(x[1]))  # ‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á embedding
top_10_faces = frame_faces_sorted[:10]  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 10 ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î

# üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
image_count = 1  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 1

for frame, embedding in top_10_faces:
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
    save_original_frame(frame, image_count)
    image_count += 1  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

# üîπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á Embedding ‡∏ó‡∏±‡πâ‡∏á 100
face_embeddings = []

# 1. Original 10 ‡∏£‡∏π‡∏õ
original_embeddings = [x[1] for x in top_10_faces]
face_embeddings.extend(original_embeddings)

# 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏™‡∏á 10 ‡∏£‡∏∞‡∏î‡∏±‡∏ö
for emb in original_embeddings:
    bright = emb + np.random.normal(0.15, 0.05, emb.shape)
    face_embeddings.append(bright)

# 3. ‡∏•‡∏î‡πÅ‡∏™‡∏á 10 ‡∏£‡∏∞‡∏î‡∏±‡∏ö
for emb in original_embeddings:
    dark = emb - np.random.normal(0.15, 0.05, emb.shape)
    face_embeddings.append(dark)

# 4. ‡πÄ‡∏ö‡∏•‡∏≠ (‡πÇ‡∏°‡πÄ‡∏™‡∏Å) 10 ‡∏£‡∏∞‡∏î‡∏±‡∏ö
for emb in original_embeddings:
    blur = emb + np.random.normal(0, 0.2, emb.shape)
    face_embeddings.append(blur)

# 5. ‡∏†‡∏≤‡∏û‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏≤‡∏¢ 10 ‡∏£‡∏∞‡∏î‡∏±‡∏ö
for emb in original_embeddings:
    missing = np.copy(emb)
    idx = np.random.choice(len(emb), size=len(emb) // 4, replace=False)
    missing[idx] = 0
    face_embeddings.append(missing)

# 6. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ 10 ‡∏£‡∏∞‡∏î‡∏±‡∏ö
for emb in original_embeddings:
    low1 = emb + np.random.normal(0, 0.05, emb.shape)
    face_embeddings.append(low1)

# 7. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏•‡∏î‡∏•‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á 10 ‡∏£‡∏∞‡∏î‡∏±‡∏ö
for emb in original_embeddings:
    low2 = emb + np.random.normal(0, 0.1, emb.shape)
    face_embeddings.append(low2)

# 8. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏¢‡∏≠‡∏∞‡∏°‡∏≤‡∏Å 10 ‡∏£‡∏∞‡∏î‡∏±‡∏ö
for emb in original_embeddings:
    low3 = emb + np.random.normal(0, 0.2, emb.shape)
    face_embeddings.append(low3)

# 9. Noise ‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÜ 20 ‡∏£‡∏π‡∏õ
for _ in range(20):
    emb = random.choice(original_embeddings)
    noise = emb + np.random.normal(0, 0.12, emb.shape)
    face_embeddings.append(noise)

# üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô 100 embeddings ‡∏û‡∏≠‡∏î‡∏µ
print(f"Total embeddings generated: {len(face_embeddings)}")  # ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô 100

# üîπ ‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
face_embeddings_json = json.dumps([embedding.tolist() for embedding in face_embeddings])
face_embeddings_binary = face_embeddings_json.encode('utf-8')

try:
    cursor.execute("""
        UPDATE Students
        SET face_embedding = ?
        WHERE student_id = ?
    """, (face_embeddings_binary, student_id))
    conn.commit()
    print(f"Student {student_id} has face embeddings stored successfully.")
except Exception as e:
    print(f"Error updating the database: {e}")

# üîπ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
print(f"10 original images saved to the face folder.")
print(f"100 embeddings (including noise, brightness, etc.) saved.")

cap.release()
conn.close()
